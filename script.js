// Ajusta los retos seg√∫n la disciplina seleccionada
function actualizarRetos() {
  const d = document.getElementById("disciplina").value;
  const reto = document.getElementById("reto");
  const natInputs = document.getElementById("natacionInputs");
  reto.innerHTML = "<option value=''>Desaf√≠o</option>";
  natInputs.classList.add("hidden");

  const desafios = {
    MTB:       ["Enduro", "DH", "XC"],
    Atletismo:["400m", "4√ó100m Relevos", "Marat√≥n"],
    Natacion: ["Resistencia"],
    Yoga:     ["Hatha", "Vinyasa", "Ashtanga"],
    Crossfit: ["AMRAP 20", "Fran", "Murph"],
    Futbol:   ["Partido 5v5", "Tiros a porter√≠a", "Resistencia con bal√≥n"],
    Baloncesto: ["Tiros libres", "Dribling", "3v3"],
    CiclismoRuta: ["Contrarreloj", "Gran Fondo", "Sprint final"],
    Boxeo:    ["Sombra", "Sparring", "Trabajo en saco"],
    Pilates:  ["Matwork", "Reformer", "Pilates Avanzado"],
    Escalada: ["Boulder", "V√≠a de 20m", "Circuito de resistencia"],
    Triatlon: ["Sprint", "Ol√≠mpico", "Half Ironman"]
  };

  if (desafios[d]) {
    desafios[d].forEach(r => {
      reto.innerHTML += `<option value="${r}">${r}</option>`;
    });
    if (d === "Natacion") natInputs.classList.remove("hidden");
  }
}

// Genera el plan completo
function procesar() {
  const peso   = parseFloat(document.getElementById("peso").value);
  const altura = parseFloat(document.getElementById("altura").value);
  const edad   = parseInt  (document.getElementById("edad").value);
  const sexo   = document.getElementById("sexo").value;
  const d      = document.getElementById("disciplina").value;
  const r      = document.getElementById("reto").value;
  const dist   = parseFloat(document.getElementById("distanciaNat").value);
  const tiempo = document.getElementById("tiempoNat").value;
  const disgustosStr = document.getElementById("disgustos").value;
  const gustosStr    = document.getElementById("gustos").value;

  if (!peso || !altura || !edad || !sexo || !d || !r) {
    return showResult("‚ö†Ô∏è Completa todos los campos para recibir tu plan.");
  }

  // C√°lculo de IMC y rango ideal
  const imc = +(peso / (altura * altura)).toFixed(2);
  const min = +(18.5 * altura * altura).toFixed(1);
  const max = +(24.9 * altura * altura).toFixed(1);

  // Mensaje base de nutrici√≥n
  let foodMsg = "";
  if (imc < 18.5)      foodMsg = "‚û°Ô∏è Bajo peso. Enf√≥cate en ganancia de masa y fuerza.";
  else if (imc <= 24.9)foodMsg = "‚û°Ô∏è Peso ideal. Mant√©n estos h√°bitos.";
  else                 foodMsg = "‚û°Ô∏è Sobrepeso. Trabajaremos con d√©ficit moderado y cardio.";

  // Plan para ajustar peso
  let pesoPlan = "";
  if (imc < 18.5) {
    pesoPlan =
      `Para llegar a ${min} kg:\n` +
      "- +500 kcal/d√≠a con snacks de alta densidad.\n" +
      "- Fuerza 3√ósemana.\n";
  } else if (imc > 24.9) {
    pesoPlan =
      `Para llegar a ${max} kg:\n` +
      "- -300/500 kcal/d√≠a.\n" +
      "- Cardio 4√ósemana (30‚Äì45 min).\n";
  } else {
    pesoPlan = "¬°Excelente! Sigue con tu rutina y alimentaci√≥n equilibrada.";
  }

  // Plan deportivo seg√∫n deporte y desaf√≠o
  let deportivo = "";
  switch (d) {
    case "MTB":
      if (r === "Enduro")
        deportivo = "üöµ 2h trail t√©cnico + subidas intensas.\nüèãÔ∏è Sentadillas 4√ó8, core 4√ó20.";
      if (r === "DH")
        deportivo = "üöµ 8 bajadas t√©cnicas.\nüèãÔ∏è Pliometr√≠a 3√ó12, hombros 3√ó15.";
      if (r === "XC")
        deportivo = "üöµ Ruta 1.5h a cadencia constante.\nüèãÔ∏è Zancadas 4√ó10, peso muerto 3√ó8.";
      break;

    case "Atletismo":
      if (r === "400m")
        deportivo = "üèÉ Calentamiento 15min + 6√ó200m a VO2.\nüèãÔ∏è Explosivos 3√ó8.";
      if (r === "4√ó100m Relevos")
        deportivo = "üèÉ 4√ó100m con testigo.\nü§∏ Agilidad escalera 4√ó3.";
      if (r === "Marat√≥n")
        deportivo = "üèÉ 60‚Äì90min al 70% FCM.\nüèãÔ∏è Piernas 3√ó12, core 3√ó20.";
      break;

    case "Natacion":
      const [mm, ss] = tiempo.split(":").map(Number);
      const totMin = mm + ss/60;
      const pace = ((totMin / dist) * 100).toFixed(2);
      deportivo =
        `üèä 10√ó100m (20s rec).\nüìä Ritmo: ${pace} min/100m.\n` +
        "üöÄ Estilos: crol (eficiente), braza (recup), mariposa (aer√≥bico).\n" +
        "üèãÔ∏è Jal√≥n espalda 3√ó10, hombros 3√ó12.";
      break;

    case "Yoga":
      deportivo =
        "üßò 60min Vinyasa fluido.\nü§∏‚Äç‚ôÇÔ∏è Transiciones suaves y respiraci√≥n Ujjayi.\n" +
        "‚ú® 10min de meditaci√≥n final.";
      break;

    case "Crossfit":
      deportivo =
        "üî• WOD ‚ÄòFran‚Äô: 21-15-9 Thruster + Pull-ups.\nüí™ Movilidad 15min.";
      break;

    case "Futbol":
      deportivo =
        "‚öΩÔ∏è Partido 5v5 (45min).\nüèÉ Sprints 10√ó30m con bal√≥n.\nüéØ Circuito de pases.";
      break;

    case "Baloncesto":
      deportivo =
        "üèÄ 5√ó20 tiros libres.\n‚õπÔ∏è Dribling en zigzag 4√ó2min.\nüèÉ Partido 3v3 20min.";
      break;

    case "CiclismoRuta":
      deportivo =
        "üö¥ Contrarreloj 20km a m√°xima cadencia.\nüöµ Gran Fondo 80km al 75% FCM.\nüèÅ Series de sprint: 6√ó200m.";
      break;

    case "Boxeo":
      deportivo =
        "ü•ä 5√ó3min sombra + 3√ó3min saco.\nü§ú Combos:  jab-cross 4√ó20.\nüèÉüèº Saltar la cuerda 5√ó2min.";
      break;

    case "Pilates":
      deportivo =
        "ü§∏ Matwork 45min: hundred, roll-up, single leg stretch.\n‚ú¥Ô∏è Reformer b√°sico 30min.";
      break;

    case "Escalada":
      deportivo =
        "üßó Boulder 6 problemas fac. media.\nüßó‚Äç‚ôÇÔ∏è V√≠a 20m con presas peque√±as.\nüèãÔ∏è Core+antebrazos 3√ó15.";
      break;

    case "Triatlon":
      deportivo =
        "üö¥ 20km ruta + üèä 800m + üèÉ 5km transici√≥n r√°pida.\nüîÑ Entreno brick 3√ósemana.";
      break;
  }

  // Procesa gustos y disgustos para comidas
  const parseList = s =>
    s.split(",").map(x=>x.trim().toLowerCase()).filter(x=>x);

  const dislikes = parseList(disgustosStr);
  const likes    = parseList(gustosStr);

  const meals = [
    {name:"Avena con pl√°tano y nueces",  ing:["avena","pl√°tano","nueces"]},
    {name:"Yogur con frutos rojos",       ing:["yogur","frutos rojos"]},
    {name:"Tortilla de claras y espinacas", ing:["huevo","espinaca"]},
    {name:"Ensalada de garbanzos y at√∫n", ing:["garbanzos","at√∫n"]},
    {name:"Pechuga de pollo con br√≥coli", ing:["pollo","br√≥coli"]},
    {name:"Salm√≥n a la plancha",          ing:["salm√≥n"]},
    {name:"Batido de prote√≠na y berries", ing:["prote√≠na","frutos del bosque"]},
    {name:"Wrap de pavo y vegetales",     ing:["pavo","vegetales"]},
    {name:"Arroz integral con lentejas",  ing:["arroz","lentejas"]},
    {name:"Smoothie verde",               ing:["espinaca","manzana","jengibre"]},
    {name:"Sopa de verduras con pollo",   ing:["verduras","pollo"]},
    {name:"Pasta integral con tomate",    ing:["pasta","tomate"]},
    {name:"Ensalada de quinoa y aguacate",ing:["quinoa","aguacate"]},
    {name:"Tostada integral con aguacate",ing:["pan integral","aguacate"]},
    {name:"Filete de ternera con ensalada",ing:["ternera","ensalada"]},
    {name:"Brochetas de pollo y pi√±a",    ing:["pollo","pi√±a"]},
    {name:"Huevos revueltos con champi√±ones",ing:["huevo","champi√±ones"]},
    {name:"Pan integral con queso y tomate",ing:["pan integral","queso","tomate"]},
    {name:"Smoothie de pl√°tano y avena",  ing:["pl√°tano","avena"]},
    {name:"Ensalada de pasta integral",   ing:["pasta","verduras"]}
  ];

  const filtered = meals.filter(m => {
    const ingr = m.ing.map(i=>i.toLowerCase());
    if (dislikes.some(d=>ingr.includes(d))) return false;
    if (likes.length && !likes.some(l=>ingr.includes(l))) return false;
    return true;
  });

  // Asegura al menos 15 platos
  const finalMeals = filtered.slice(0,15);
  if (finalMeals.length < 15) {
    const extra = meals.filter(m=>!finalMeals.includes(m)).slice(0,15-finalMeals.length);
    finalMeals.push(...extra);
  }

  const mealList = finalMeals
    .map((m,i)=>`${i+1}. ${m.name}`)
    .join("\n");

  // Monta mensaje
  const mensaje =
    `¬°Hola! Aqu√≠ tu plan completo:\n\n` +
    `üìä IMC: ${imc} (ideal ${min}‚Äì${max} kg)\n` +
    `üë§ Edad: ${edad} ‚Ä¢ Sexo: ${sexo}\n\n` +
    `üçΩÔ∏è Nutrici√≥n: ${foodMsg}\n${pesoPlan}\n` +
    `ü•á Deporte: ${d} ‚Üí ${r}\n${deportivo}\n\n` +
    `üç¥ 15 comidas sugeridas:\n${mealList}\n\n` +
    `¬°A por todas!`;

  showResult(mensaje);
}

// Muestra el resultado justificado
function showResult(txt) {
  document.getElementById("resultado").textContent = txt;
}
